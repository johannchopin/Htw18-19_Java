import java.util.Random;
import java.util.NoSuchElementException;

/**
 * A Test class for the Integer Producer and Consumer
 *
 * @author Alexandre Guidoux
 * @version 1.0
 */
public class DialogTest
{
    private IntegerConsumer consumer;
    private IntegerProducer producer;
    private Random rand;
    
    public DialogTest(boolean ordered){
        this.consumer = new IntegerConsumer();
        this.producer = new IntegerProducer(ordered);
        this.rand     = new Random();
    }
    
    public void init(){
        for(int i = 0; i<10000; i++){
            if(rand.nextInt(2) > 0){
                producer.produce();
            }
            else{
                try{
                    consumer.consume(producer.getNextInt());      
                } catch(NoSuchElementException e){
                    i--;
                }
            }
        }
    }
    
    public void printState(){
        System.out.println("Number of different results: " + consumer.numberOfDifferentResults());
        System.out.println("=================================");
        for(int i=0; i<consumer.numberOfDifferentResults(); i++){
            System.out.println();
            System.out.println("Number " + i);
            System.out.println("Number of occurences:      " + 
                                consumer.numberOfOccurences(i));
            // Warning : a heap will be printed, not a sorted queue
            System.out.println("Get cross total ascending: " + 
                                consumer.getCrossTotalsAscending(i));
            // Warning : a heap will be printed, not a sorted queue
            System.out.println("And reversed:              " + 
                                consumer.getCrossTotalsDescending(i));
        }
    }
    
    public void run(){
        init();
        printState();
    }
    
    public static void main(String[] args){
        new DialogTest(args.length > 0).run();
    }
}




import java.util.HashMap;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Collections;
/**
 * @author Alexandre Guidoux
 * @version 1.0
 */
public class IntegerConsumer
{
    private HashMap<Integer, HashSet<Long>> results;
    private static final HashSet<Long> emptySet = new HashSet<>();
    
    public IntegerConsumer(){
        this.results = new HashMap<Integer, HashSet<Long>>();
    }
    
    /**
     * Add the elapsed argument to the PriorityQueue accessed by the key
     * quersumme.
     * If the key doesn't have a queue, it will be created
     */
    private void addToResults(int quersumme, long elapsed){
        results.putIfAbsent(quersumme, new HashSet<Long>());
        results.get(quersumme).add(elapsed);
    }
    
    public void consume(int n){
        int quersumme = 0;
        long startTimer = System.currentTimeMillis();
        while(n > 0){
           quersumme += n%10;
           n /= 10;
        }
        long elapsedTime = System.currentTimeMillis() - startTimer;
        addToResults(quersumme, startTimer);
    }
    
    public int numberOfDifferentResults(){
        return results.size();
    }
    
    public int numberOfOccurences(int quersumme){
        if(!results.containsKey(quersumme))
            return 0;
        return results.get(quersumme).size();
    }
    
    public PriorityQueue<Long> getCrossTotalsAscending(int quersumme){
        return new PriorityQueue<Long>(
            getTimestampsForResult(quersumme)
        );
    }
    
    public PriorityQueue<Long> getCrossTotalsDescending(int quersumme){
        PriorityQueue<Long> sortedQueue = getCrossTotalsAscending(quersumme);
        PriorityQueue<Long> reversedQueue = new PriorityQueue<>(
                                                   sortedQueue.size(),
                                                   Collections.reverseOrder());
        for(long el: sortedQueue)
            reversedQueue.add(el);
        return reversedQueue;
    }
    
    /**
     * Return the collected timestamps, or an empty HashSet if the quersumme
     * is not in the HashMap
     */
    public HashSet<Long> getTimestampsForResult(int quersumme){
        return results.getOrDefault(quersumme, emptySet);
    }
}




























































import java.util.Random;
import java.util.Queue;
import java.util.NoSuchElementException;
import java.util.LinkedList;
import java.util.PriorityQueue;

/**
 * Gibt integer zurueck and wird entweder in einer Queue oder in einem 
 * PriorityQueue gespeichert.
 *
 * @author Alexandre Guidoux
 * @version 1.0
 */
public class IntegerProducer
{
    private Random intGen;
    private Queue<Integer> storage;

    /**
     * Constructor for objects of class IntegerGenerator
     * @param ordered check if the generated integer must be sorted in 
     * the collection
     */
    public IntegerProducer(boolean ordered)
    {
        this.intGen = new Random();
        this.storage  = (ordered)? new PriorityQueue(): new LinkedList();
    }

    /**
     * Return and store an integer between 0 and 1000
     */
    public int produce(){
        int product = intGen.nextInt(1000);
        this.storage.add(product);
        return product;
    }
    
    /**
     * Shortcut to generate many numbers
     * Warning : produce return a int, produceMany return nothing
     */
    public void produceMany(int n){
        while(n-- > 0)
            produce();
    }
    
    /**
     * This method remove the int of the queue.
     * @return the next int in the queue or null if the queue is empty
     * @throw NoSuchElementException if the queue is empty
     */
    public int getNextInt(){
        return storage.remove();
    }
}










