import java.util.function.IntPredicate;

/**
 * Extends the MyFunction interface with 2 filter methods.
 * They filter apply or the argument with a predicate 
 * and create a new object Conditionate
 */
public interface Conditionate extends MyFunction {
    /**
     * @param predicate
     * @return an implementation of MyFunction
     */
    default Conditionate conditionateInput(IntPredicate predicate) {
        return (int n) -> {
            if(predicate.test(n))
                return apply(n);
            return 0;
        };
    }

    default Conditionate conditionateOutput(IntPredicate predicate) {
        return (int n) -> {
            int result = apply(n);
            if(predicate.test(result))
                return result;
            return 0;
        };
    }
}





































import java.util.function.IntPredicate;

public class ConditionateCLI{
    public static final String MAN = "Use : java ConditionateCLI FUNCTION START END\n"
        + "  with \n"
        + "\tFUNCTION: String is \"EvenSquareNumber\" or \"OddFactorialNumber\"\n"
        + "\tSTART   : Integer\n"
        + "\tEND     : Integer\n";

    public static Conditionate iLambdaConditionate() {
        return (int n) -> n * n;
    }

    public static Conditionate iiLambda() {
        return (int n) -> {
            int acc = 1;
            for(int i=2; i <= n; i++)
                acc *= i;
            return acc;
        };
    }

    public static void main(String[] args) {
        int ARGS_NEEDED = 3;

        if(args.length != ARGS_NEEDED) {
            if(args.length != 0 
            && (args[0].contentEquals("-h") || args[0].contentEquals("--help"))) {
                System.out.println(MAN);
                System.exit(0);
            }
            System.out.println(args.length + " argument(s) found, need " + ARGS_NEEDED + ".");
            System.exit(1);
        }

        // MAIN CODE IMPLEMENTATION
        IntPredicate isEven = (int n) -> n%2 == 0;
        IntPredicate isOdd = new IntPredicate() {
                public boolean test(int n) {
                    return !isEven.test(n);
                }
            };

        Conditionate isEvenSquareNumber = ConditionateCLI.iLambdaConditionate()
            .conditionateInput(isEven);
        Conditionate isOddFactorialNumber = ConditionateCLI.iiLambda()
            .conditionateOutput(isOdd);
        // END CODE IMPLEMENTATION

       
        try {
            String method = args[0];
            int start = Integer.parseInt(args[1]);
            int stop = Integer.parseInt(args[2]);

            Conditionate c = null;
            switch(method) {
                case "EvenSquareNumber":
                c = isEvenSquareNumber; break;

                case "OddFactorialNumber":
                c = isOddFactorialNumber; break;

                default:
                System.out.println("Unrecognized method. See --help for available methods.");
                System.exit(1);
            }
            c.applyAndPrint(start, stop);
        } catch(NumberFormatException e) {
            e.printStackTrace();
            System.out.println("Wrong input " + e.getMessage().toLowerCase() + ". See --help ");
            System.exit(1);
        }
    }
}

























































import java.lang.FunctionalInterface;

@FunctionalInterface
/**
 * Implement the 1.a Aufgabe
 * 
 * @author Alexandre Guidoux
 * @version 1.0
 */
public interface MyFunction {
	final static int MINIMAL_FOR_POSITIVE_INTEGER =0 ;
	
	public int apply(int i);
	
	/**
	 * 
	 * @param i A bound
	 * @param j A bound
	 * @throws ArithmeticException if the result of apply become negative
	 */
	default void applyAndPrint(MyFunction mf, int i, int j) {
		int start = (i < j)? i: j;
		int stop  = (i > j)? i: j;
		
		checkArgs(start >= 0, "Numbers must be > 0.");
		checkArgs(stop <= Integer.MAX_VALUE, 
					"Number too big for an integer. Must be under " + Integer.MAX_VALUE);
		int result;
		for(int n=start; n <= stop; n++) {
			result = apply(n);
			if(result >= 0)
				System.out.println(result);
			else {
				throw new ArithmeticException(result + ": integer out of bound");
			}
		}
	}
	
	default void applyAndPrint(int i, int j) {
		applyAndPrint(this, i, j);
	}
	
	default void checkArgs(boolean condition, String msg) {
		if(!condition)
			throw new IllegalArgumentException(msg);
	}
}



















/**
 * Implements all the functions of the 2.b
 * main method used for testing
 *
 * @author Alexandre Guidoux
 * @version 1.0
 */
public class MyFunctionImplementation{
    public final static String MAN = 
        "Use : java MyFunctionImplementation FUNCTION START END\n"
        + "  with \n"
        + "\t[FUNCTION: String in \"[i|ii|iii|iv]Lambda\" or \"[i|ii|iii|iv]Anon\" or \"iiStatic\"jobs\n"
        + "\t with\n"
        + "\t\t i  : f(x) = x*x\n"
        + "\t\t ii : f(x) = x!\n"
        + "\t\t iii: f(x) = x^(x-1)\n"
        + "\t\t iv : f(x) = fib(x) (Fibonacci-Folge)\n"
        + "\t and\n"
        + "\t\t Lambda : with lambda expressions implemented\n"
        + "\t\t Anon : with Anon classes implemented\n"
        + "\tSTART   : Integer\n"
        + "\tEND     : Integer\n";

    public static MyFunction iLambda() {
        return (int n) -> n * n;
    }

    public static MyFunction iAnon() {
        return new MyFunction() {
            @Override
            public int apply(int i) {
                return i * i;
            }
        };
    }

    public static MyFunction iiLambda() {
        return (int n) -> {
            int acc = 1;
            for(int i=2; i <= n; i++)
                acc *= i;
            return acc;
        };
    }

    public static MyFunction iiAnon() {
        return new MyFunction() {
            @Override
            public int apply(int n) {
                int acc = 1;
                for(int i=2; i <= n; i++)
                    acc *= i;
                return acc;
            }
        };
    }

    // Used in iiStatic 
    static class StaticImplemented {
        public static int factorial(int n) {
            int acc = 1;
            for(int i=2; i <= n; i++)
                acc *= i;
            return acc;
        }
    }

    // TODO : Check if correct implemented
    public static MyFunction iiStatic() {
        return (int n) -> MyFunctionImplementation.StaticImplemented.factorial(n);
    }

    /**
     * f(x) = x^(x+1)
     * @param start bound
     * @param stop bound
     */
    public static MyFunction iiiLambda() {
        return (int n) -> {
            int acc = n;
            for(int i = 0; i < n; i++)
                acc *= n;
            return acc;
        };
    }

    public static MyFunction iiiAnon() {
        return new MyFunction() {
            @Override
            public int apply(int n) {
                int acc = n;
                for(int i = 0; i < n; i++)
                    acc *= n;
                return acc;
            }
        };
    }

    /**
     * f(x) = fib(x) (Fibonacci-Folge)

     * @param start
     * @param stop
     */
    public static MyFunction ivLambda() {
        final class Fibo{
            public int[] memoization;

            public Fibo(int n) {
                this.memoization = new int[n+1];
            }

            public int recurs(int x){
                if(memoization[x] != 0)  // if element is initialized
                    return memoization[x];

                if(x <= 1)
                    memoization[x] = 1;
                else
                    memoization[x] = recurs(x - 2) + recurs(x - 1);
                return memoization[x];
            };	
        }

        return (int n) -> {return new Fibo(n).recurs(n);};
    }

    public static MyFunction ivAnon() {
        return new MyFunction() {
            @Override
            public int apply(int n) {

                final class FiboWrapper{
                    public int[] memoization;

                    public FiboWrapper(int n) {
                        this.memoization = new int[n+1]; // if 0, the array must have at least 1 case
                    }

                    public int recurs(int x){
                        if(this.memoization[x] != 0) // if element is initialized
                            return memoization[x];
                        if(x <= 1)
                            memoization[x] = 1;
                        else
                            memoization[x] = recurs(x - 2) + recurs(x - 1);
                        return memoization[x];
                    };
                }

                FiboWrapper w = new FiboWrapper(n); // for memoization
                return w.recurs(n);
            }
        };		
    }

    public static void main(String[] args) {
        int ARGS_NEEDED = 3;

        if(args.length != ARGS_NEEDED) {
            if(args.length != 0 
            && (args[0].contentEquals("-h") || args[0].contentEquals("--help"))) {
                System.out.println(MAN);
                System.exit(0);
            }
            System.out.println(args.length + " argument(s) found, need " + ARGS_NEEDED + ". See --help.");
            System.exit(1);
        }

        try {
            String method = args[0];
            int start = Integer.parseInt(args[1]);
            int stop = Integer.parseInt(args[2]);

            MyFunction f = null;
            switch(method) {
                case "iLambda":
                f = iLambda(); break;

                case "iAnon":
                f = iAnon(); break;

                case "iiLambda":
                f = iiLambda(); break;

                case "iiAnon":
                f = iiAnon(); break;

                case "iiStatic":
                f = iiStatic(); break;

                case "iiiLambda":
                f = iiiLambda(); break;
                case "iiiAnon":
                f = iiiAnon(); break;

                case "ivLambda":
                f = ivLambda(); break;
                case "ivAnon":
                f = ivAnon(); break;

                default:
                System.out.println("Unrecognized method. See --help for available methods.");
                System.exit(1);
            }
            f.applyAndPrint(start, stop);
        } catch(NumberFormatException e) {
            e.printStackTrace();
            System.out.println("Wrong input " + e.getMessage().toLowerCase() + ". See --help ");
            System.exit(1);
        }
    }
}



















































/**
 * Implement the 1.b Aufgabe : the factorial implementation of MyFunction
 * as Top Level Class
 */
public class TopLevelFactorial implements MyFunction {
	final static String MAN = "Execute java TopLevelFactorial START END\n"
			+ "  with START and END two integers";
	
	public TopLevelFactorial(int start, int stop) {
		applyAndPrint(start, stop);
	}
	
	@Override
	public int apply(int n) {
		int acc = 1;
		for(int i=2; i <= n; i++)
			acc *= i;
		return acc;
	}
	
	public static void main(String[] args) {
		int ARGS_NEEDED = 2;
		
		if(args.length != ARGS_NEEDED) {
			if(args.length != 0 
			   && (args[0].contentEquals("-h") || args[0].contentEquals("--help"))) {
				System.out.println(MAN);
				System.exit(0);
			}
			System.out.println(args.length + " argument(s) found, need " + ARGS_NEEDED + ".");
			System.exit(1);
		}
		
		try {
			int start = Integer.parseInt(args[0]);
			int stop = Integer.parseInt(args[1]);
			
			new TopLevelFactorial(start, stop);
		} catch(NumberFormatException e) {
			e.printStackTrace();
			System.out.println("Wrong input " + e.getMessage().toLowerCase() + ". See --help ");
			System.exit(1);
		}
	}	
}





















